#!/bin/bash


# Initialize our own variables:
output_file=""
verbose=0
gpu=0

while getopts "h?vg" opt; do
    case "$opt" in
    h|\?)
        echo "Usage: $0 [-v] [-g] filename" 
	echo "Create a basic SBATCH template"
        echo "    -g              GPU - add line to request GPUs"
        echo "    -v              verbose - prints definitions and descriptions for each option"
	exit 0
        ;;
    v)  verbose=1
        ;;
    g)  gpu=1
        ;;
    esac
done

shift $((OPTIND-1))

output=$@

function default {
echo "#!/bin/bash -e

#SBATCH --nodes=1
#SBATCH --ntasks-per-node=1
#SBATCH --cpus-per-task=1
#SBATCH --time=1:00:00
#SBATCH --mem=2GB
#SBATCH --job-name=myTest
#SBATCH --mail-type=END
#SBATCH --output=slurm_%j.out" > ./$output.SBATCH

if [ "$gpu" == 1 ]; then
	echo "#SBATCH --gres=gpu:1">> ./$output.SBATCH
fi

echo "
module purge" >> ./$output.SBATCH
}

function verbose {
echo "in ver"
echo "#!/bin/bash -e
# This line tells the shell how to execute this script, and is unrelated
# to SLURM.
   
# at the beginning of the script, lines beginning with "#SBATCH" are read by
# SLURM and used to set queueing options. You can comment out a SBATCH
# directive with a second leading #, eg:
##SBATCH --nodes=1
   
# we need 1 node, will launch a maximum of one task and use one cpu for the task: 
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=1
#SBATCH --cpus-per-task=1
   
# we expect the job to finish within 5 hours. If it takes longer than 5
# hours, SLURM can kill it:
#SBATCH --time=1:00:00
   
# we expect the job to use no more than 2GB of memory:
#SBATCH --mem=2GB
   
# we want the job to be named "myTest" rather than something generated
# from the script name. This will affect the name of the job as reported
# by squeue:
#SBATCH --job-name=myTest
 
# when the job ends, send me an email 
#SBATCH --mail-type=END
   
# both standard output and standard error are directed to the same file.
# It will be placed in the directory I submitted the job from and will
# have a name like slurm_12345.out
#SBATCH --output=slurm_%j.out" > ./$output.SBATCH 

if [ "$gpu" == 1 ]; then
echo "#SBATCH --gres=gpu:1" >> ./$output.SBATCH                                  
fi  

echo "
# once the first non-comment, non-SBATCH-directive line is encountered, SLURM
# stops looking for SBATCH directives. The remainder of the script is  executed
# as a normal Unix shell script
  
# first we ensure a clean running environment:
module purge

# and load the module(s) for the software we are using:


# commands required to run" >> ./$output.SBATCH
}

if [ "$verbose" == 1 ]; then 
	verbose
else
	default
fi
